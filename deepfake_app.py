import streamlit as st
import numpy as np
from keras.preprocessing import image as keras_image
import tensorflow as tf
from PIL import Image

# Load the trained model
model = tf.keras.models.load_model('D:/1MCA/project/deepFake_detection/save_model/model.keras')

# Function to preprocess and predict the uploaded image
def preprocess_and_predict(image_file):
    try:
        # Preprocess the image
        img = keras_image.load_img(image_file, target_size=(150, 150, 3))
        img_array = keras_image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
        img_array = img_array / 255.0  # Normalize
        
        # Predict
        prediction = model.predict(img_array)
        class_names = ["Fake", "Real"]  # model's class labels
        predicted_class = class_names[np.argmax(prediction)]
        confidence = 100 * np.max(prediction)
        return predicted_class, confidence
    except Exception as e:
        return f"Error: {str(e)}", 0

# App state management
if "page" not in st.session_state:
    st.session_state.page = "landing"

# Landing page
if st.session_state.page == "landing":
    col1, col2 = st.columns([3, 1])  # Adjusted column widths to place the image on the right

    with col1:
        st.title("DeepFake Image Detector")
        st.subheader("Detect Fake Images Generated by GANs")
        st.write("""
            This tool helps identify fake images specifically generated by Generative Adversarial Networks (GANs).
            GANs are advanced AI systems capable of creating highly realistic synthetic images, which can be indistinguishable from real images.
        """)
        st.subheader("Why Is This Important?")
        st.write("""
            GAN-generated DeepFakes can:
            - Spread misinformation.
            - Threaten privacy and security.
            - Damage reputations.
            - Erode trust in digital media.
        """)
        st.markdown("### Ready to analyze an image?")
        if st.button("Check Image"):
            st.session_state.page = "upload"

    with col2:
        # Add a representative image on the right side
        st.markdown("<div style='display: flex; align-items: center; justify-content: center; height: 100%;'>", unsafe_allow_html=True)
        st.image("D:/1MCA/project/deepFake_detection/interface.png", 
                 caption="GAN-Generated Image Example", use_container_width=True)
        st.markdown("</div>", unsafe_allow_html=True)         

# Upload window
if st.session_state.page == "upload":
    st.title("DeepFake Detection for Images")
    st.write("Upload an image to check if it was generated by a GAN or is real.")
    
    uploaded_image = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
    
    if uploaded_image is not None:
        image = Image.open(uploaded_image)
        st.image(image, caption='Uploaded Image', use_column_width=True)
        st.write("Analyzing...")
        
        predicted_class, confidence = preprocess_and_predict(uploaded_image)
        
        if confidence > 0:
            st.write(
                f"The image is classified as **{predicted_class}** with a confidence of **{confidence:.2f}%**."
            )
        else:
            st.error(predicted_class)
    
    if st.button("Back to Info Page"):
        st.session_state.page = "landing"